{#- server block -#}
{%- macro ngx_site(names, content, ssl = true, key = none, cert = none) %}
{% filter indent %}
server {
server_name {{ names }};

listen {{ ssl | ternary(443, 80) }};
{% if ssl %}
ssl on;
{% if key is not none or cert is not none %}
ssl_certificate {{ cert }};
ssl_certificate_key {{ key }};
{% endif %}
{% endif %}

{{ content }}
{% endfilter %}
}
{% endmacro -%}

{#- format directive value as array, boolean, or literal -#}
{% macro ngx_value(value) -%}
  {%- if value is sequence and value is not string -%}
    {{ value | sort | join(' ') }}
  {%- elif value is sameas true -%}
    on
  {%- elif value is sameas false -%}
    off
  {%- else -%}
    {{ value }}
  {%- endif -%}
{% endmacro -%}

{#- redirect to a given host -#}
{% macro ngx_permanent_redirect(ssl, host) -%}
  return 301 {{ ssl | ternary('https', 'http') }}://{{ host }}$request_uri;
{%- endmacro -%}

{#- format a directive and key-value arguments -#}
{% macro ngx_directive_dict(directive, values) %}
{% for key, value in values | dictsort %}
{{ directive }} {{ key }} {{ ngx_value(value) }};
{% endfor %}
{% endmacro -%}

{#- format a multi-valued directive, or several single-valued directives -#}
{% macro ngx_directive_list(directive, values, multiple) %}
{% if multiple %}
{{ directive }} {{ values | sort | join(' ') }};
{% else %}
{% for value in values %}
{{ directive }} {{ ngx_value(value) }};
{% endfor %}
{% endif %}
{% endmacro -%}

{% macro ngx_headers(cfg) %}
{% if cfg.set is defined %}
{{ ngx_directive_dict('proxy_set_header', cfg.set) }}
{% endif %}
{% if cfg.ignore is defined %}
{{ ngx_directive_list('proxy_ignore_headers', cfg.ignore, true) }}
{% endif %}
{% if cfg.hide is defined %}
{{ ngx_directive_list('proxy_hide_header', cfg.hide, false) }}
{% endif %}
{% endmacro -%}

{% macro ngx_location(loc) %}
{%- set match_op %}
{% if loc.match is not defined or loc.match == 'prefix' %}
{% elif loc.match == 'exact' %}
 =
{%- elif loc.match == 'regex' %}
 ~
{%- elif loc.match == 'iregex' %}
 ~*
{%- else %}{# longest prefix, no regex: ^~ #}
 ^~
{%- endif %}
{% endset %}
{% set content %}
{{ ngx_block_content(loc) }}
{%- endset %}
{% filter indent %}
location{{ match_op }} {{ loc.location }} {
{% if content %}
{{ content }}
{% endif %}
{% if loc.proxy is defined %}
{% if loc.proxy.pass is defined %}
proxy_pass {{ loc.proxy.pass }};
{% endif %}
{% if loc.proxy.redirect is defined %}
proxy_redirect {{ loc.proxy.redirect }};
{% endif %}
{% endif %}
{% endfilter %}
}
{% endmacro -%}

{#- render directives applicable to both server and location -#}
{% macro ngx_block_content(this) %}
{% if this.client_max_body_size is defined %}
client_max_body_size {{ this.client_max_body_size }};
{% endif %}
{% if this.gzip is defined %}
gzip {{ ngx_value(this.gzip) }};
{% endif %}
{% if this.htpasswd is defined %}
auth_basic "Authentication required";
auth_basic_user_file "{{ this.htpasswd }}";
{% endif %}
{% if this.proxy is defined and this.proxy.headers is defined %}

{{ ngx_headers(this.proxy.headers) }}
{%- endif %}
{% if this.cache is defined %}
{% if this.cache.enabled | default(true) %}

proxy_cache {{ this.cache.id }};
proxy_cache_valid {{ this.cache.duration }};
{% if this.cache.key is defined %}
proxy_cache_key "{{ this.cache.key }}";
{% endif %}
{% else %}
proxy_cache off;
{%- endif %}
{% endif %}
{% if this.cors is defined %}

{% filter indent %}
if ($request_method = 'OPTIONS') {
add_header Access-Control-Allow-Origin "{{ this.cors.origin | default('*') }}";
{% if this.cors.max_age is defined %}
add_header Access-Control-Max-Age {{ this.cors.max_age }};
{% endif %}
{% if this.cors.methods is defined %}
add_header Access-Control-Allow-Methods '{{ this.cors.methods | sort | join(', ') | upper }}';
{% endif %}
{% if this.cors.headers is defined %}
add_header Access-Control-Allow-Headers '{{ this.cors.headers | sort | join(', ') }}';
{% endif %}
add_header Content-Length 0;
return 200;
{% endfilter %}
}
{% endif %}
{% if this.locations is defined %}

{% for location in this.locations %}
{{ ngx_location(location) }}
{% endfor %}
{% endif %}
{% endmacro -%}

{% if site.caches is defined %}
{% for cache in site.caches %}
{% set proxy_cache_path %}
proxy_cache_path
"{{ ngxs_cache_dir[ansible_os_family] }}/{{ cache.id }}"
levels=1:2
keys_zone={{ cache.id }}:{{ (cache.max_keys / 8000.0) | round(0, 'ceil') | int }}m
{% if cache.inactive is defined %}
inactive={{ cache.inactive }}
{% endif %}
{% if cache.inactive is defined %}
max_size={{ cache.max_size }}
{% endif %}
{%- endset %}
{{ proxy_cache_path | replace('\n', ' ') }};
{% endfor %}

{% endif -%}

{# redirects from other domains to the primary domain #}
{% if site.redirect_from is defined %}
{% set redirect_names %}
{{ site.redirect_from | sort | join(' ') }}
{%- endset -%}

{# redirect to the primary domain (plaintext) #}
{% if site.ssl | default(true) %}
{{ ngx_site(
  names = redirect_names,
  content = ngx_permanent_redirect(true, site.names[0]),
  ssl = false
  ) }}
{% endif -%}

{# redirect to the primary domain #}
{{ ngx_site(
  names = redirect_names,
  content = ngx_permanent_redirect(true, site.names[0]),
  ssl = site.ssl | default(true),
  key = site.ssl_key | default(none),
  cert = site.ssl_cert | default(none)
) }}
{% endif %}

{%- set canonical_names %}
{{ site.names | sort | join(' ') }}
{%- endset -%}

{# redirect from plaintext to SSL #}
{% if site.ssl | default(true) %}
{{ ngx_site(
  names = canonical_names,
  content = ngx_permanent_redirect(true, '$http_host'),
  ssl = false
  ) }}
{%- endif %}

{%- set main_content -%}
{{ ngx_block_content(site) }}
{%- if not (site.allow_robots | default(true)) %}
location = /robots.txt {
    expires 1d;
    return 200 "User-Agent: *\nDisallow: /\n";
}
{% endif %}
{% endset %}

{{ ngx_site(
  names = canonical_names,
  content = main_content,
  ssl = site.ssl | default(true),
  key = site.ssl_key | default(none),
  cert = site.ssl_cert | default(none)
) }}
