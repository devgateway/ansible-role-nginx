{#- server block -#}
{%- macro ngx_site(server_name, ssl, content) %}
server {
    server_name {{ server_name }};
    listen {{ ssl | ternary(443, 80) }};
    {% if ssl -%}
    ssl on;
    {% endif %}

    {{ content | indent }}
}
{% endmacro -%}

{#- format directive value as array, boolean, or literal -#}
{% macro ngx_value(value) -%}
  {%- if value is sequence and value is not string -%}
    {{ value | sort | join(' ') }}
  {%- elif value is sameas true -%}
    on
  {%- elif value is sameas false -%}
    off
  {%- else -%}
    {{ value }}
  {%- endif -%}
{% endmacro -%}

{#- redirect to a given host -#}
{% macro ngx_permanent_redirect(ssl, host) -%}
  return 301 {{ ssl | ternary('https', 'http') }}://{{ host }}$request_uri;
{%- endmacro -%}

{#- format a directive and key-value arguments -#}
{% macro ngx_directive_dict(directive, values) %}
{% for key, value in values | dictsort %}
{{ directive }} {{ key }} {{ ngx_value(value) }};
{% endfor %}
{% endmacro -%}

{#- format a multi-valued directive, or several single-valued directives -#}
{% macro ngx_directive_list(directive, values, multiple) %}
{% if multiple %}
{{ directive }} {{ values | sort | join(' ') }};
{% else %}
{% for value in values %}
{{ directive }} {{ ngx_value(value) }};
{% endfor %}
{% endif %}
{% endmacro -%}

{% macro ngx_headers(cfg) %}
{% if cfg.set is defined %}
# pass headers to the backend
{{ ngx_directive_dict('proxy_set_header', cfg.set) }}
{% endif %}
{% if cfg.ignore is defined %}
# ignore headers produced by the backend
{{ ngx_directive_list('proxy_ignore_headers', cfg.ignore, true) }}
{% endif %}
{% if cfg.hide is defined %}
# hide headers produced by the backend
{{ ngx_directive_list('proxy_hide_header', cfg.hide, false) }}
{% endif %}
{% endmacro -%}

{% macro ngx_location(loc) %}
{%- set match_op %}
{% if loc.match is not defined or loc.match == 'prefix' %}
{% elif loc.match == 'exact' %}
 =
{%- elif loc.match == 'regex' %}
 ~
{%- elif loc.match == 'iregex' %}
 ~*
{%- else %}{# longest prefix, no regex: ^~ #}
 ^~
{%- endif %}
{% endset %}
location{{ match_op }} {{ loc.location }} {
{% if loc.proxy is defined %}
{% if loc.proxy.headers is defined %}
    {{ ngx_headers(loc.proxy.headers) | indent }}
    proxy_pass {{ loc.proxy.pass }};
{% endif %}
{% else %}
{% endif %}
{% if loc.locations is defined %}

{% for subloc in loc.locations %}
    {{ ngx_location(subloc) | indent }}
{%- endfor %}
{% endif %}
}
{% endmacro %}

{%- set use_ssl = site.ssl.enabled is not defined or site.ssl.enabled -%}

{# redirects from other domains to the primary domain #}
{% if site.redirect_from is defined %}
{% set other_names -%}
  {{ site.redirect_from | sort | join(' ') }}
{%- endset -%}

{# redirect to the primary domain (plaintext) #}
{% if use_ssl %}
{{ ngx_site(other_names, false, ngx_permanent_redirect(true, site.names[0])) }}{{ '\n' }}
{%- endif -%}

{# redirect to the primary domain #}
{{ ngx_site(other_names, use_ssl, ngx_permanent_redirect(true, site.names[0])) }}
{% endif %}

{%- set server_name -%}
  {{ site.names | sort | join(' ') }}
{%- endset -%}

{# redirect from plaintext to SSL #}
{% if use_ssl %}
{{ ngx_site(server_name, false, ngx_permanent_redirect(true, '$http_host')) }}
{%- endif %}

{% set content %}
{% if site.client_max_body_size is defined %}
client_max_body_size {{ site.client_max_body_size }};
{% endif %}
{% if site.gzip is defined %}
gzip {{ ngx_value(site.gzip) }};
{% endif %}
{% if site.proxy is defined and site.proxy.headers is defined %}

{{ ngx_headers(site.proxy.headers) }}
{% endif %}
{% for loc in site.locations %}
{{ ngx_location(loc) }}
{% endfor %}
{% endset %}

{{ ngx_site(server_name, site.ssl.enabled, content) }}
